import { useQuery } from '@tanstack/react-query';
import { useAuthProvider } from "contexts/AuthContext";
import React from 'react';
import { get, put } from "services/api";
import FormComponent from '../components/Form';

const ChangePasswordPage = () => {
  const { userInfo } = useAuthProvider();
  
  // L·∫•y th√¥ng tin user t·ª´ API response structure
  const profileData = userInfo?.result?.data;
  
  const { data: userData, isLoading } = useQuery({ 
    queryKey: [`/customers/${profileData?.id}`], 
    queryFn: () => get(`/customers/${profileData?.id}`),
    staleTime: 60000,
    enabled: !!profileData?.id && profileData?.accountType === 'customer'
  });
  
  const user = userData?.data?.result?.data || profileData || {};
  
  const formFields = [
    {
      name: "currentPassword",
      label: "M·∫≠t kh·∫©u hi·ªán t·∫°i",
      type: "password" as const,
      required: true,
      placeholder: "Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i",
      validation: {
        required: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
      }
    },
    {
      name: "newPassword",
      label: "M·∫≠t kh·∫©u m·ªõi",
      type: "password" as const,
      required: true,
      placeholder: "Nh·∫≠p m·∫≠t kh·∫©u m·ªõi",
      validation: {
        required: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi",
        minLength: {
          value: 6,
          message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±"
        },
        pattern: {
          value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,
          message: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng v√† 1 s·ªë"
        }
      }
    },
    {
      name: "confirmNewPassword",
      label: "X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi",
      type: "password" as const,
      required: true,
      placeholder: "Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi",
      validation: {
        required: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi",
        validate: (value: string, formValues: any) => 
          value === formValues.newPassword || "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp"
      }
    }
  ];
  
  const handleSubmit = async (data: any) => {
    const dataUpdate: any = {
      currentPassword: data.currentPassword,
      newPassword: data.newPassword,
      confirmNewPassword: data.confirmNewPassword
    };
    
    // S·ª≠ d·ª•ng API endpoint ph√π h·ª£p cho customer
    if (profileData?.accountType === 'customer') {
      return await put(`/customers/change-password`, dataUpdate);
    } else {
      return await put(`/profile/change-password`, dataUpdate);
    }
  };
  
  // Ki·ªÉm tra n·∫øu l√† t√†i kho·∫£n Google th√¨ kh√¥ng cho ƒë·ªïi m·∫≠t kh·∫©u
  const hasGoogleId = profileData?.google_id || profileData?.googleId;

  if (hasGoogleId) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-2xl mx-auto px-4">
          <div className="bg-white rounded-xl shadow-lg p-8 text-center">
            <div className="mb-6">
              <svg className="w-16 h-16 mx-auto text-blue-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
              </svg>
              <h1 className="text-2xl font-bold text-gray-900 mb-2">Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u</h1>
              <p className="text-gray-600">
                T√†i kho·∫£n c·ªßa b·∫°n ƒë∆∞·ª£c ƒëƒÉng nh·∫≠p qua Google. Vui l√≤ng s·ª≠ d·ª•ng Google ƒë·ªÉ qu·∫£n l√Ω m·∫≠t kh·∫©u.
              </p>
            </div>

            <div className="space-y-4">
              <a
                href="/profile"
                className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Quay l·∫°i trang c√° nh√¢n
              </a>

              <div className="text-sm text-gray-500">
                <p>ƒê·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u Google, vui l√≤ng truy c·∫≠p:</p>
                <a
                  href="https://myaccount.google.com/security"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-600 hover:text-blue-800 underline"
                >
                  Google Account Security
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="flex justify-center items-center p-10">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-2xl mx-auto px-4">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">ƒê·ªïi m·∫≠t kh·∫©u</h1>
          <p className="text-gray-600">C·∫≠p nh·∫≠t m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n c·ªßa b·∫°n</p>
        </div>

        {/* Form Card */}
        <div className="bg-white rounded-xl shadow-lg overflow-hidden">
          <div className="p-6">
            <FormComponent
              title=""
              fields={formFields}
              initialValues={{
                currentPassword: "",
                newPassword: "",
                confirmNewPassword: ""
              }}
              onSubmit={handleSubmit}
              backUrl="/profile"
              submitButtonText="C·∫≠p nh·∫≠t m·∫≠t kh·∫©u"
              invalidateQueryKey={`/customers/${user.id}`}
              redirectAfterSubmit="/profile"
            />
          </div>
        </div>

        {/* Security Tips */}
        <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-blue-900 mb-3">üí° M·∫πo b·∫£o m·∫≠t</h3>
          <ul className="space-y-2 text-sm text-blue-800">
            <li className="flex items-start">
              <span className="text-blue-500 mr-2">‚Ä¢</span>
              S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh v·ªõi √≠t nh·∫•t 8 k√Ω t·ª±
            </li>
            <li className="flex items-start">
              <span className="text-blue-500 mr-2">‚Ä¢</span>
              K·∫øt h·ª£p ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
            </li>
            <li className="flex items-start">
              <span className="text-blue-500 mr-2">‚Ä¢</span>
              Kh√¥ng s·ª≠ d·ª•ng th√¥ng tin c√° nh√¢n d·ªÖ ƒëo√°n
            </li>
            <li className="flex items-start">
              <span className="text-blue-500 mr-2">‚Ä¢</span>
              Thay ƒë·ªïi m·∫≠t kh·∫©u ƒë·ªãnh k·ª≥ ƒë·ªÉ tƒÉng c∆∞·ªùng b·∫£o m·∫≠t
            </li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default ChangePasswordPage;
